{"version":3,"sources":["http/http-client.ts","http/config.ts","services/todo-service.ts","services/comment-service.ts","components/List.tsx","components/Item.tsx","services/post-service.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","baseURL","parseDefault","raw","parser","get","path","a","response","data","getTodos","getComments","List","props","map","renderItem","Item","label","key","getPosts","App","useState","todos","setTodos","comments","setComments","posts","setPosts","fetchTodos","res","fetchComments","fetchPosts","onClick","slice","t","title","id","c","name","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAGMA,E,OAAWC,EAAMC,OAAO,CAAEC,QCHT,yCDSjBC,EAAe,SAAIC,EAAUC,GAC/B,OAAOA,EAASA,EAAOD,GAAOA,GAarBE,EAAG,uCAAI,WAAUC,EAAcF,GAAxB,eAAAG,EAAA,sEACOT,EAASO,IAAIC,GADpB,cACVE,EADU,yBAETN,EAAaM,EAASC,KAAML,IAFnB,2CAAJ,wDEnBHM,EAAQ,uCAAG,sBAAAH,EAAA,sEACPF,EAAI,UADG,mFAAH,qDCMRM,EAAW,uCAAG,sBAAAJ,EAAA,sEACVF,EAAI,aADM,mFAAH,qD,OCRXO,EAAO,SAAKC,GAAL,aAChB,uCACCA,EAAMJ,YADP,aACC,EAAYK,IAAID,EAAME,eCFdC,EAAO,SAACH,GAAD,OAA4C,6BAAqBA,EAAMI,OAAlBJ,EAAMK,MCMlEC,EAAQ,uCAAG,sBAAAZ,EAAA,sEACPF,EAAI,UADG,mFAAH,qDCgCNe,MAjCf,WAAgB,IAAD,EACaC,mBAAwB,MADrC,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAA2B,MAF9C,mBAENG,EAFM,KAEIC,EAFJ,OAGaJ,mBAAwB,MAHrC,mBAGNK,EAHM,KAGCC,EAHD,KAIPC,EAAU,uCAAG,4BAAArB,EAAA,sEACCG,IADD,OACXmB,EADW,OAEjBN,EAASM,GAFQ,2CAAH,qDAIVC,EAAa,uCAAG,4BAAAvB,EAAA,sEACFI,IADE,OACdkB,EADc,OAEpBJ,EAAYI,GAFQ,2CAAH,qDAIbE,EAAU,uCAAG,4BAAAxB,EAAA,sEACCY,IADD,OACXU,EADW,OAEjBF,EAASE,GAFQ,2CAAH,qDAIhB,OACE,8BACE,mCACE,0EAGA,wBAAQG,QAASJ,EAAjB,0BACA,cAAC,EAAD,CAAMnB,KAAI,OAAEa,QAAF,IAAEA,OAAF,EAAEA,EAAOW,MAAM,EAAG,GAAIlB,WAAY,SAACmB,GAAD,OAAO,cAAC,EAAD,CAAiBjB,MAAOiB,EAAEC,OAAfD,EAAEE,OAChE,wBAAQJ,QAASF,EAAjB,mCACA,cAAC,EAAD,CAAMrB,KAAI,OAAEe,QAAF,IAAEA,OAAF,EAAEA,EAAUS,MAAM,EAAG,GAAIlB,WAAY,SAACsB,GAAD,OAAO,cAAC,EAAD,CAAiBpB,MAAOoB,EAAEC,MAAfD,EAAED,OACnE,wBAAQJ,QAASD,EAAjB,0BACA,cAAC,EAAD,CAAMtB,KAAI,OAAEiB,QAAF,IAAEA,OAAF,EAAEA,EAAOO,MAAM,EAAG,GAAIlB,WAAY,SAACwB,GAAD,OAAO,cAAC,EAAD,CAAiBtB,MAAOsB,EAAEJ,OAAfI,EAAEH,aCpBzDI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9b48d2dd.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { baseUrl } from \"./config\";\r\n\r\nconst instance = axios.create({ baseURL: baseUrl });\r\n\r\nexport const setAuthorization = (token: string) => {\r\n    instance.defaults.headers[\"Authorization\"] = token;\r\n}\r\n\r\nconst parseDefault = <T>(raw: any, parser?: (raw?: any) => T): T => {\r\n    return parser ? parser(raw) : raw;\r\n}\r\n\r\nexport const post = async <T>(path: string, body: any, parser?: (raw?: any) => T): Promise<T> => {\r\n    const response = await instance.post(path, body)\r\n    return parseDefault(response.data, parser);\r\n}\r\n\r\nexport const put = async <T>(path: string, body: any, parser?: (raw: any) => T): Promise<T> => {\r\n    const response = await instance.put(path, body)\r\n    return parseDefault(response.data, parser); \r\n}\r\n\r\nexport const get =  async <T>(path: string, parser?: (raw: any) => T): Promise<T> => {\r\n    const response = await instance.get(path)\r\n    return parseDefault(response.data, parser);\r\n}\r\n","export const baseUrl = \"https://jsonplaceholder.typicode.com\";\r\n","import { get } from \"../http/http-client\"\r\n\r\nexport type Todo = any;\r\n\r\nexport const getTodos = async (): Promise<Todo[]> => {\r\n    return await get(\"/todos\");\r\n}\r\n\r\nexport const getTodo = async (id: number): Promise<Todo> => {\r\n    return get(`/todos/${id}`)\r\n}","import { get } from \"../http/http-client\"\r\n\r\nexport interface Comment {\r\n    postId: number;\r\n    id: number;\r\n    name: string;\r\n    email: string;\r\n    body: string;\r\n};\r\n\r\nexport const getComments = async (): Promise<Comment[]> => {\r\n    return await get(\"/comments\");\r\n}\r\n\r\nexport const getComment = async (id: number): Promise<Comment> => {\r\n    return get(`/comments/${id}`)\r\n}","import React from 'react';\r\n\r\nexport const List = <T,>(props: {data ?: T[] | null;renderItem: (item: T) => React.ReactElement;}) => (\r\n    <ul>\r\n    {props.data?.map(props.renderItem)}\r\n  </ul>\r\n);\r\n","import React from 'react';\r\n\r\nexport const Item = (props: { key: number; label: string; }) => <li key={props.key}>{props.label}</li>;\r\n","import { get } from \"../http/http-client\"\r\n\r\nexport interface Post {\r\n    id: number;\r\n    title: string;\r\n    body: string;\r\n};\r\n\r\nexport const getPosts = async (): Promise<Post[]> => {\r\n    return await get(\"/posts\");\r\n}\r\n\r\nexport const getPost = async (id: number): Promise<Post> => {\r\n    return get(`/posts/${id}`)\r\n}","import React, { useState } from 'react';\nimport { getTodos, Todo } from './services/todo-service';\nimport { Comment, getComments } from \"./services/comment-service\"\nimport { List } from './components/List';\nimport { Item } from './components/Item';\nimport { getPosts, Post } from './services/post-service';\n\nfunction App() {\n  const [todos, setTodos] = useState<Todo[] | null>(null);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const fetchTodos = async () => {\n    const res = await getTodos();\n    setTodos(res);\n  }\n  const fetchComments = async () => {\n    const res = await getComments();\n    setComments(res);\n  }\n  const fetchPosts = async () => {\n    const res = await getPosts();\n    setPosts(res);\n  }\n  return (\n    <div>\n      <header>\n        <p>\n          Exemplo de abstração de camada HTTP\n        </p>\n        <button onClick={fetchTodos}>Buscar Todos</button>\n        <List data={todos?.slice(0, 3)} renderItem={(t) => <Item key={t.id} label={t.title} />}/>\n        <button onClick={fetchComments}>Buscar Comentários</button>\n        <List data={comments?.slice(0, 3)} renderItem={(c) => <Item key={c.id} label={c.name} />}/>\n        <button onClick={fetchPosts}>Buscar Posts</button>\n        <List data={posts?.slice(0, 3)} renderItem={(p) => <Item key={p.id} label={p.title} />}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}